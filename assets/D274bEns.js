import{r as h,T as y,j as m}from"./-ej9eCOV.js";const S=()=>{const n="/api",c=p(),l=h(c.token),i={"Content-Type":"application/json",Accept:"application/json",...l.value?{Authorization:`Bearer ${l.value}`}:{}};return{post:async(s,a)=>{try{console.log("Отправка POST запроса:",{url:`${n}${s}`,data:{...a,password:a.password?"***":void 0}});const r=await fetch(`${n}${s}`,{method:"POST",headers:i,body:JSON.stringify(a),credentials:"include"});console.log("Получен ответ:",{status:r.status,statusText:r.statusText,headers:Object.fromEntries(r.headers.entries())});let t;try{const e=await r.text();t=e?JSON.parse(e):{},console.log("Данные ответа:",t)}catch(e){throw console.error("Ошибка при парсинге JSON:",e),new Error("Ошибка при обработке ответа сервера")}if(!r.ok){console.error("Ошибка API:",{status:r.status,data:t,url:`${n}${s}`});const e=(t==null?void 0:t.message)||"Ошибка сервера";throw new Error(e)}return t}catch(r){throw console.error("Ошибка API:",r),r instanceof Error?r:new Error("Неизвестная ошибка при выполнении запроса")}},saveQRCode:async s=>{var a;try{const r=await fetch(`${n}/qr/save`,{method:"POST",headers:i,body:JSON.stringify({data:s,userId:(a=c.user)==null?void 0:a.id}),credentials:"include"});let t;try{t=await r.json()}catch(e){throw console.error("Ошибка при парсинге ответа:",e),new Error("Ошибка при обработке ответа сервера")}if(!r.ok){const e=(t==null?void 0:t.message)||"Ошибка при сохранении QR-кода";throw new Error(e)}return t}catch(r){throw console.error("Ошибка при сохранении QR-кода:",r),r}},getQRCodes:async()=>{try{const s=await fetch(`${n}/qr/list`,{headers:i,credentials:"include"});let a;try{a=await s.json()}catch(r){throw console.error("Ошибка при парсинге ответа:",r),new Error("Ошибка при обработке ответа сервера")}if(!s.ok){const r=(a==null?void 0:a.message)||"Ошибка при получении QR-кодов";throw new Error(r)}return a}catch(s){throw console.error("Ошибка при получении QR-кодов:",s),s}}}},p=y("auth",()=>{const g=h(null),n=h(null),c=h(!1),l=h(null),i=m(()=>!!n.value);(()=>{try{const e=localStorage.getItem("auth_token"),u=localStorage.getItem("auth_user");if(e&&(n.value=e),u)try{const o=JSON.parse(u);o&&typeof o=="object"&&(g.value=o)}catch(o){console.error("Ошибка при парсинге данных пользователя:",o),localStorage.removeItem("auth_user")}}catch(e){console.error("Ошибка при инициализации из localStorage:",e)}})();const f=e=>{n.value=e,e?localStorage.setItem("auth_token",e):localStorage.removeItem("auth_token")},d=e=>{g.value=e,e?localStorage.setItem("auth_user",JSON.stringify(e)):localStorage.removeItem("auth_user")},s=()=>{f(null),d(null)};return{user:g,token:n,loading:c,error:l,isAuthenticated:i,login:async(e,u)=>{c.value=!0,l.value=null;try{console.log("Попытка входа с данными:",{email:e});const o=await S().post("/auth/login",{email:e,password:u});if(console.log("Ответ сервера:",o),o&&o.success&&o.token&&o.user)return console.log("Успешная авторизация"),f(o.token),d(o.user),!0;throw console.error("Неверный формат ответа:",o),new Error((o==null?void 0:o.message)||"Неверный формат ответа")}catch(o){console.error("Ошибка при входе:",o);const w=o instanceof Error?o.message:"Ошибка авторизации";throw l.value=w,new Error(w)}finally{c.value=!1}},logout:async()=>{c.value=!0;try{s()}catch(e){const u=e instanceof Error?e.message:"Ошибка при выходе";throw l.value=u,new Error(u)}finally{c.value=!1}},checkAuth:()=>i.value}});export{p as u};
