import{N as u,r as c}from"./LcGo-jax.js";const g=u("auth",()=>{const n=c(null),i=c(!1),a=c(!1),s=c(null);return{user:n,isAuthenticated:i,loading:a,error:s,login:async(e,r)=>{a.value=!0,s.value=null;try{const o=await(await fetch("/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:r})})).json();if(!o.success)throw new Error(o.error||"Invalid email or password");return n.value=o.user,i.value=!0,o.user}catch(t){throw s.value=t instanceof Error?t.message:"Login failed",t}finally{a.value=!1}},register:async(e,r,t)=>{a.value=!0,s.value=null;try{const l=await(await fetch("/api/auth/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,email:r,password:t})})).json();if(!l.success)throw new Error(l.error||"Registration failed");return n.value=l.user,i.value=!0,l.user}catch(o){throw s.value=o instanceof Error?o.message:"Registration failed",o}finally{a.value=!1}},logout:async()=>{try{const r=await(await fetch("/api/auth/logout",{method:"POST"})).json();if(r.success)n.value=null,i.value=!1;else throw new Error(r.error)}catch(e){throw console.error("Logout error:",e),e}},sendVerificationEmail:async()=>{try{const r=await(await fetch("/api/auth/verify-email",{method:"POST"})).json();if(!r.success)throw new Error(r.error)}catch(e){throw console.error("Verification email error:",e),e}}}});export{g as u};
