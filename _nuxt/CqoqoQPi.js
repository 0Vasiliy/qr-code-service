import{O as u,r as l}from"./Dkr2uebP.js";const E=u("auth",()=>{const r=l(null),a=l(!1),t=l(!1),n=l(null);return{user:r,isAuthenticated:a,loading:t,error:n,login:async(e,o)=>{t.value=!0,n.value=null;try{const s=await(await fetch("/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:o})})).json();if(!s.success)throw new Error(s.error||"Invalid email or password");return r.value=s.user,a.value=!0,s.user}catch(c){throw n.value=c instanceof Error?c.message:"Login failed",c}finally{t.value=!1}},register:async(e,o,c)=>{t.value=!0,n.value=null;try{const i=await(await fetch("/api/auth/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:o,name:c})})).json();if(!i.success)throw new Error(i.error||"Registration failed");return r.value=i.user,a.value=!0,i.user}catch(s){throw n.value=s instanceof Error?s.message:"Registration failed",s}finally{t.value=!1}},logout:async()=>{try{const o=await(await fetch("/api/auth/logout",{method:"POST"})).json();if(o.success)r.value=null,a.value=!1;else throw new Error(o.error)}catch(e){throw console.error("Logout error:",e),e}},sendVerificationEmail:async()=>{try{const o=await(await fetch("/api/auth/verify-email",{method:"POST"})).json();if(!o.success)throw new Error(o.error)}catch(e){throw console.error("Verification email error:",e),e}},connectGoogle:async()=>{try{const o=await(await fetch("/api/auth/google/connect",{method:"POST"})).json();if(o.success)r.value&&(r.value={...r.value,googleConnected:!0});else throw new Error(o.error)}catch(e){throw console.error("Google connection error:",e),e}},disconnectGoogle:async()=>{try{const o=await(await fetch("/api/auth/google/disconnect",{method:"POST"})).json();if(o.success)r.value&&(r.value={...r.value,googleConnected:!1});else throw new Error(o.error)}catch(e){throw console.error("Google disconnection error:",e),e}},connectGithub:async()=>{try{const o=await(await fetch("/api/auth/github/connect",{method:"POST"})).json();if(o.success)r.value&&(r.value={...r.value,githubConnected:!0});else throw new Error(o.error)}catch(e){throw console.error("GitHub connection error:",e),e}},disconnectGithub:async()=>{try{const o=await(await fetch("/api/auth/github/disconnect",{method:"POST"})).json();if(o.success)r.value&&(r.value={...r.value,githubConnected:!1});else throw new Error(o.error)}catch(e){throw console.error("GitHub disconnection error:",e),e}},loginWithGoogle:async()=>{t.value=!0,n.value=null;try{const o=await(await fetch("/api/auth/google/login",{method:"POST",headers:{"Content-Type":"application/json"}})).json();if(!o.success)throw new Error(o.error||"Google login failed");return r.value=o.user,a.value=!0,o.user}catch(e){throw n.value=e instanceof Error?e.message:"Google login failed",e}finally{t.value=!1}},loginWithGithub:async()=>{t.value=!0,n.value=null;try{const o=await(await fetch("/api/auth/github/login",{method:"POST",headers:{"Content-Type":"application/json"}})).json();if(!o.success)throw new Error(o.error||"GitHub login failed");return r.value=o.user,a.value=!0,o.user}catch(e){throw n.value=e instanceof Error?e.message:"GitHub login failed",e}finally{t.value=!1}}}});export{E as u};
